{"ast":null,"code":"import _asyncToGenerator from \"D:/Noam/index-bislat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@azure/msal-angular\";\nimport * as i2 from \"@angular/common/http\"; // import {Base} from '../class/Base'\n// import { bases } from '../pages/header/img-url';\n// import { Course } from '../class/course';\n\nexport class ApiCallsService {\n  // selection: any;\n  constructor(authService, http) {\n    this.authService = authService;\n    this.http = http;\n    this.response = '';\n  }\n\n  AddBase(base) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'text'\n    };\n    this.http.post(\"https://index-bislat-back.azurewebsites.net/Iafbase/AddBase\", JSON.stringify(base), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'text'\n    }).subscribe(data => this.response = data, error => this.response = error);\n    console.log(this.response);\n    return this.response;\n  }\n\n  GetBase() {\n    return this.http.get('https:index-bislat-back.azurewebsites.net/Iafbase');\n  }\n\n  postCourseSelection(selectionForm) {// this.http.post('https://index-bislat-back.azurewebsites.net/Sort', selectionForm);\n  }\n\n  getCourseSelection() {// console.log(this.http.get('https:index-bislat-back.azurewebsites.net/Sort'));\n  }\n\n  AdBase(base) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'text'\n    };\n    this.http.post(\"https://index-bislat-back.azurewebsites.net/Sort\", JSON.stringify(base), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'text'\n    }).subscribe(data => this.response = data, error => this.response = error);\n    return this.response;\n  }\n\n  postRequest(httpURL, item) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // const httpOptions = {\n      //   headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      //   responseType: 'text',\n      // }\n      // this.http.post(httpURL, JSON.stringify(item), {\n      //   headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      //   responseType: 'text',\n      // }).subscribe(data =>\n      //   this.response = data,\n      //   error => this.response = error\n      // );\n      // return this.response;\n      const response = yield fetch(httpURL, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.parse(item)\n      });\n      response.json().then(data => {\n        console.log(data);\n        _this.response = data;\n      });\n      return response;\n    })();\n  }\n\n  GetRequest(httpURL) {\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.open(\"GET\", httpURL, false); // false for synchronous request\n\n    xmlHttp.send(null);\n    return JSON.parse(xmlHttp.responseText);\n  }\n\n}\n\nApiCallsService.ɵfac = function ApiCallsService_Factory(t) {\n  return new (t || ApiCallsService)(i0.ɵɵinject(i1.MsalService), i0.ɵɵinject(i2.HttpClient));\n};\n\nApiCallsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiCallsService,\n  factory: ApiCallsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:/Noam/index-bislat/src/app/services/api-connection/api-calls.service.ts"],"names":["HttpHeaders","i0","i1","i2","ApiCallsService","constructor","authService","http","response","AddBase","base","httpOptions","headers","responseType","post","JSON","stringify","subscribe","data","error","console","log","GetBase","get","postCourseSelection","selectionForm","getCourseSelection","AdBase","postRequest","httpURL","item","fetch","method","body","parse","json","then","GetRequest","xmlHttp","XMLHttpRequest","open","send","responseText","ɵfac","ApiCallsService_Factory","t","ɵɵinject","MsalService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@azure/msal-angular\";\r\nimport * as i2 from \"@angular/common/http\";\r\n// import {Base} from '../class/Base'\r\n// import { bases } from '../pages/header/img-url';\r\n// import { Course } from '../class/course';\r\nexport class ApiCallsService {\r\n    // selection: any;\r\n    constructor(authService, http) {\r\n        this.authService = authService;\r\n        this.http = http;\r\n        this.response = '';\r\n    }\r\n    AddBase(base) {\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n            responseType: 'text',\r\n        };\r\n        this.http.post(\"https://index-bislat-back.azurewebsites.net/Iafbase/AddBase\", JSON.stringify(base), {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n            responseType: 'text',\r\n        }).subscribe(data => this.response = data, error => this.response = error);\r\n        console.log(this.response);\r\n        return this.response;\r\n    }\r\n    GetBase() {\r\n        return this.http.get('https:index-bislat-back.azurewebsites.net/Iafbase');\r\n    }\r\n    postCourseSelection(selectionForm) {\r\n        // this.http.post('https://index-bislat-back.azurewebsites.net/Sort', selectionForm);\r\n    }\r\n    getCourseSelection() {\r\n        // console.log(this.http.get('https:index-bislat-back.azurewebsites.net/Sort'));\r\n    }\r\n    AdBase(base) {\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n            responseType: 'text',\r\n        };\r\n        this.http.post(\"https://index-bislat-back.azurewebsites.net/Sort\", JSON.stringify(base), {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n            responseType: 'text',\r\n        }).subscribe(data => this.response = data, error => this.response = error);\r\n        return this.response;\r\n    }\r\n    async postRequest(httpURL, item) {\r\n        // const httpOptions = {\r\n        //   headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n        //   responseType: 'text',\r\n        // }\r\n        // this.http.post(httpURL, JSON.stringify(item), {\r\n        //   headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n        //   responseType: 'text',\r\n        // }).subscribe(data =>\r\n        //   this.response = data,\r\n        //   error => this.response = error\r\n        // );\r\n        // return this.response;\r\n        const response = await fetch(httpURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.parse(item)\r\n        });\r\n        response.json().then(data => {\r\n            console.log(data);\r\n            this.response = data;\r\n        });\r\n        return response;\r\n    }\r\n    GetRequest(httpURL) {\r\n        var xmlHttp = new XMLHttpRequest();\r\n        xmlHttp.open(\"GET\", httpURL, false); // false for synchronous request\r\n        xmlHttp.send(null);\r\n        return JSON.parse(xmlHttp.responseText);\r\n    }\r\n}\r\nApiCallsService.ɵfac = function ApiCallsService_Factory(t) { return new (t || ApiCallsService)(i0.ɵɵinject(i1.MsalService), i0.ɵɵinject(i2.HttpClient)); };\r\nApiCallsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiCallsService, factory: ApiCallsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}