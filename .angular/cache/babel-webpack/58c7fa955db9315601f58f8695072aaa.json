{"ast":null,"code":"import * as data from '../mock-data.json';\nimport { of, pipe } from 'rxjs';\nimport { distinctUntilChanged, debounceTime, switchMap } from 'rxjs/operators';\nimport { equalshWords } from 'src/app/pages/header/img-url';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api-connection/api-calls.service\";\nexport let SortCoursesService = /*#__PURE__*/(() => {\n  class SortCoursesService {\n    constructor(apiConnection) {\n      this.apiConnection = apiConnection;\n      this.dictionaryData = data;\n      this.MaxKeyCourses = 8; //------------------------------------------------------------------------------------\n\n      this.getListCourses = () => pipe(debounceTime(300), distinctUntilChanged(), switchMap(input => {\n        input = input.trim();\n        let coursesdata = this.courses[0];\n\n        if (!isNaN(Number(input)) && input != '') {\n          const filteredCourses = coursesdata.filter(item => item.CourseNumber.slice(0, input.length) === input);\n          return of(filteredCourses); // return of(this.clearCourseNumber(filteredCourses));\n          // return of(filteredCourses);\n        } else if (isNaN(Number(input)) && input != '') {\n          let searchWords = this.getSearchWords(input);\n          let filteredCourses = this.getListOfWord(searchWords[0]);\n\n          for (let i = 1; i < searchWords.length; i++) {\n            let partialFilteredCourses = this.getListOfWord(searchWords[i]);\n            partialFilteredCourses = partialFilteredCourses.filter(item => filteredCourses.includes(item));\n            filteredCourses = partialFilteredCourses;\n          }\n\n          if (filteredCourses != []) {\n            return of(filteredCourses);\n          } // if (filteredCourses != []) { return of(this.clearCourseNumber(filteredCourses)); }\n          // if (filteredCourses != []) { return of(filteredCourses); }\n\n        }\n\n        return of([]);\n      })); // this.courses = apiConnection.GetRequest('https://index-bislat-back.azurewebsites.net/Course');\n\n\n      this.courses = data;\n    }\n\n    getSelectedCourses(coursesName) {\n      // let unclearedCourses: any[] = this.apiConnection.GetRequest(\"https://index-bislat-back.azurewebsites.net/Course\");\n      // let selectedCourses: any = [];\n      // for(let i = 0; i < coursesName.length; i++){\n      //   if(coursesName[i][0] === '\"') { coursesName[i] = coursesName[i].slice(1,coursesName[i].length-1); }  //clear \"\"\n      //   let unclearedCourseNumber = unclearedCourses.filter(item => item.courseName === coursesName[i])[0].courseNumber;\n      //   selectedCourses.push(this.apiConnection.GetRequest(\"https://index-bislat-back.azurewebsites.net/Course/\" + unclearedCourseNumber));\n      // }\n      // return selectedCourses;\n      let coursesData = this.courses[0];\n      let courses = [];\n\n      for (let i = 0; i < coursesName.length; i++) {\n        if (coursesName[i][0] === '\"') {\n          coursesName[i] = coursesName[i].slice(1, coursesName[i].length - 1);\n        } //clear \"\"\n\n\n        courses.push(coursesData.filter(item => item.CourseName === coursesName[i])[0]);\n      }\n\n      return courses;\n    } //------------------------------------------------------------------------------------\n\n\n    isItemFavorite(item) {\n      const favorites = JSON.parse(localStorage.getItem('courseName') || '[]');\n      console.log(item);\n\n      if (favorites.includes(item.CourseName)) {\n        return 'favorite.svg';\n      }\n\n      return 'notFavorite.svg';\n    } //------------------------------------------------------------------------------------\n\n\n    findFavoriteCourses() {\n      let coursesNames = JSON.parse(localStorage.getItem('courseName') || '[]');\n      let favorites = [];\n\n      for (let i = 0; i <= this.MaxKeyCourses; i++) {\n        let keyDictionary = [];\n\n        if (this.dictionaryData[i]) {\n          keyDictionary = this.dictionaryData[i];\n        }\n\n        let index = 0;\n\n        while (keyDictionary[index]) {\n          if (coursesNames.includes(keyDictionary[index].CourseName)) {\n            favorites.push(keyDictionary[index]);\n          }\n\n          index++;\n        }\n      }\n\n      return favorites;\n    }\n\n    getListOfWord(searchWord) {\n      let coursesdata = this.courses[0];\n      let Arr = coursesdata.filter(item => (\" \" + item.CourseName).includes(\" \" + searchWord));\n\n      for (let i = 0; i < equalshWords.length; i++) {\n        if (equalshWords[i].includes(searchWord)) {\n          let words = this.getSearchWords(equalshWords[i]);\n\n          for (let index = 0; index < words.length; index++) {\n            let tmpArr = coursesdata.filter(item => (\" \" + item.CourseName).includes(words[index]) && !Arr.includes(item));\n            Arr = [...Arr, ...tmpArr];\n          }\n        }\n      }\n\n      return Arr;\n    } //----------------------------------------------------\n\n\n    getSearchWords(input) {\n      let searchWords = [];\n\n      while (input.indexOf(' ') != -1) {\n        let index = input.indexOf(' ');\n        searchWords.push(input.slice(0, index));\n        input = input.slice(index + 1, input.length);\n      }\n\n      searchWords.push(input);\n      return searchWords;\n    }\n\n    clearCourseNumber(courses) {\n      for (let i = 0; i < courses.length; i++) {\n        if (isNaN(Number(courses[i].courseNumber))) {\n          let index = courses[i].courseNumber.indexOf(\"/\");\n          courses[i].courseNumber = courses[i].courseNumber.slice(0, index);\n        }\n      }\n\n      return courses;\n    }\n\n    findCourseNumber(courses) {\n      let unclearedCourses = this.apiConnection.GetRequest(\"https://index-bislat-back.azurewebsites.net/Course\");\n      let coursesNumber = [];\n\n      for (let i = 0; i < courses.length; i++) {\n        coursesNumber.push(unclearedCourses.filter(item => item.courseName === courses[i].courseName)[0].courseNumber);\n      }\n\n      return coursesNumber;\n    }\n\n  }\n\n  SortCoursesService.ɵfac = function SortCoursesService_Factory(t) {\n    return new (t || SortCoursesService)(i0.ɵɵinject(i1.ApiCallsService));\n  };\n\n  SortCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SortCoursesService,\n    factory: SortCoursesService.ɵfac,\n    providedIn: 'root'\n  });\n  return SortCoursesService;\n})();","map":null,"metadata":{},"sourceType":"module"}